// Lab08vPrac.java
// The "Palindrome" Program
// This is the student starting file for Lab08.

import java.util.Scanner;
import java.util.*;

public class Lab08vPrac
{
	public static void main (String[] args)
	{
      Scanner input = new Scanner(System.in);
		boolean notFinished = false;
		do
		{
			System.out.print("Enter a string  ===>>  ");
			String str = input.nextLine();
			System.out.println();
			System.out.println("Entered String:     " + str);
			System.out.println("Palindrome:         " + Palindrome.isPal(str));
			System.out.println("Almost Palindrome:  " + Palindrome.almostPal(str));	  // used only for the 100 point version\
			System.out.print("Do you wish to repeat this program [Y/N]?  ===>>  ");
			String repeat = input.nextLine();
			notFinished = (repeat.equals("Y")) || (repeat.equals("y"));
			System.out.println();
		}
		while (notFinished);
	}
}



class Palindrome
{




	/*
	 * Precondition:  s is an arbitrary String.
	 * Postcondition: The value of true is returned if s is a Palindrome, false otherwise.
    * Note:          >>>>> This method is required for both the 80 point and the 100 point versions  <<<<<
	 */
	public static boolean isPal(String s)
	{
      s = s.toLowerCase();
      Boolean x = true;
      String rev = Palindrome.getReverse(s);
      if (rev.equals(s))
      {
         x = true;
      }
      else
      {
         x = false;
      }
         
         
      return x;      
	}  
   
   private static String getReverse(String s)
   {
   
      String yeet = new String("");
      for(int k = s.length(); k>0; k--)
      {
         yeet+=s.substring(k-1,k);
      }
      return yeet;

   }
   
   
   
   
   
   /*
	 * Precondition:  s is a String of one character.
	 * Postcondition: The value of true is returned if s is a letter and false otherwise.
    * Note:          >>>>> This method is only completed for the 100 point version  <<<<<
	 */
 
   private static boolean isLetter(String letter)
   {
      
      letter = letter.toUpperCase();
      
     
      boolean x = false;
      
      String list = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      
         for(int j = 0; j<=25; j++)
         {
            String listLet = list.substring(j,j+1);
           
            if (letter.equals(listLet))
            {
               x = true;
               j=26;
            }
            else
            {
               x = false;
            }      
         
         }
      
      
      return x;
   }
   
   
   
   
   
   
   
	/*
	 * Precondition:  s is an arbitrary String.
	 * Postcondition: All non-letter characters are removed from s, and this "purged" String is returned.
    * Note:          >>>>> This method is only completed for the 100 point version  <<<<<
	 */
	private static String purge(String s)
	{
      s = s.trim();
      s = s.toUpperCase();
      int k = 0;
      while (k <= s.length())
      {
         String letWord = s.substring(k,k+1);
         Boolean x = Palindrome.isLetter(letWord);
       
         if (x == true)
         {
            k++;
         }
         
         else if (x == false)
         {
            s = s.substring(0,k-1) + s.substring(k+1);
            k++;                                          //FIGURE OUT HOW TO DELETE A SINGLE CHARACTER FROM STRING IF IT IS FALSE
         }
      
      }
      
      return s;        
	}
  
  
  
  
   
   /*
	 * Precondition:  s is an arbitrary String.
	 * Postcondition: After purging all non-letter characters from s,
	 *                the value of true is returned if the resulting String is a Palindrome, false otherwise.
    * Note:          >>>>> This method is only completed for the 100 point version  <<<<<
	 */
    
	public static boolean almostPal(String s)
	{
      return true;      // This statement is provided to allow initial compiling.
	}

}
